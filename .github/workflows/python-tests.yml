name: Python Tests

on:
  push:
    branches: [ main ]
    paths:
      - "**.py"
      - "requirements*.txt"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/python-tests.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "**.py"
      - "requirements*.txt"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/python-tests.yml"
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        exclude:
          # Exclude some combinations to speed up the matrix
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_bloxapi
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov flake8 black mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      shell: bash
    
    - name: Check formatting with Black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports .
      continue-on-error: true
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_bloxapi
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort mypy bandit safety
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with Black
      run: |
        black --check --diff .
    
    - name: Check imports with isort
      run: |
        isort --check --diff .
    
    - name: Security check with bandit
      run: |
        bandit -r .
      continue-on-error: true
    
    - name: Check dependencies with safety
      run: |
        safety check
      continue-on-error: true